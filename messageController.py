# messages.py
import random
import re
import vk_api
from config import token

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –∏ –≥—Ä–∞–Ω–µ–π
MAX_DICE_COUNT = 100
MAX_DICE_SIDES = 100

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—Ä–æ—Å–∫–æ–≤ 20-–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
CRIT_FAIL_EMOJI = "üò±"
CRIT_SUCCESS_EMOJI = "üéâ"
GEAR_EMOJI = "‚öôÔ∏è"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –∏ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
vk_session = vk_api.VkApi(token=token)
vk = vk_session.get_api()


def send_message(peer_id: int, message: str) -> None:
    vk.messages.send(
        peer_id=peer_id,
        message=message,
        random_id=random.randint(1, 10**6)
    )


def get_user_name(user_id: int) -> str:
    user_info = vk.users.get(user_ids=user_id)
    if user_info:
        return user_info[0].get('first_name', "–¥—Ä—É–≥")
    return "–¥—Ä—É–≥"


def roll_dice(sides: int, rolls: int = 1) -> list[int]:
    return [random.randint(1, sides) for _ in range(rolls)]


def is_fox(username: str) -> str:
    return "–õ–∏—Å–∏—á–∫–∞" if username == "Moonlight" else username


help_message = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Å–∏—Å—Ç–µ–º–æ–π –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤:\n\n"
    "üé≤ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤:\n"
    "- /–¥20 ‚Äî –±—Ä–æ—Å–∏—Ç—å –æ–¥–∏–Ω 20-–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫.\n"
    "- /3–¥6 ‚Äî –±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∏ 6-–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É.\n"
    "- /–¥20+5 ‚Äî –±—Ä–æ—Å–∏—Ç—å –æ–¥–∏–Ω 20-–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫ –∏ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä +5.\n\n"
    "üìã –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n"
    "- /–¥20 ‚Äî –æ–±—ã—á–Ω—ã–π –±—Ä–æ—Å–æ–∫ 20-–≥—Ä–∞–Ω–Ω–æ–≥–æ –∫—É–±–∏–∫–∞.\n"
    "- /2–¥10+3 ‚Äî –±—Ä–æ—Å–∏—Ç—å –¥–≤–∞ 10-–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä +3.\n\n"
    "–ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å', –µ—Å–ª–∏ —Ç–µ–±–µ —Å–Ω–æ–≤–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —ç—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è. –£–¥–∞—á–∏ –≤ –±—Ä–æ—Å–∫–∞—Ö! üé≤"
)


def calculate_roll(username: str, command: str) -> str:
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É: –∑–∞–º–µ–Ω—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π "–¥"
    normalized_command = command.replace("–∫", "–¥").replace("d", "–¥")
    lines = normalized_command.splitlines()
    results = []
    display_name = is_fox(username)

    if not lines:
        return f"–î–∞, {display_name}?"

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤.
    dice_pattern = re.compile(
        r'^(?P<count>\d*)–¥(?P<sides>\d+)((?P<modifiers>([+-]\d+)+))?$'
    )
    modifier_pattern = re.compile(r'([+-]\d+)')

    for line in lines:
        line = line.strip()
        if not line:
            continue

        # –£–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        line_clean = line.lstrip('/')
        match = dice_pattern.fullmatch(line_clean)
        if not match:
            results.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, {display_name}. –ü—Ä–∏–º–µ—Ä: /–¥20+5.")
            continue

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ç–æ 1)
        count_str = match.group('count')
        dice_count = int(count_str) if count_str.isdigit() else 1

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π –∫—É–±–∏–∫–∞
        dice_sides = int(match.group('sides'))

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, +5 –∏–ª–∏ -1)
        modifiers_str = match.group('modifiers') or ""
        modifier_values = modifier_pattern.findall(modifiers_str)

        # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)
        total_modifiers = sum(int(mod) for mod in modifier_values)

        # –°—É–º–º–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–≤–∞ `-4` –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å `-8`)
        simplified_modifiers = {}
        for mod in modifier_values:
            if mod in simplified_modifiers:
                simplified_modifiers[mod] += 1
            else:
                simplified_modifiers[mod] = 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        modifier_display = ""
        for mod, count in simplified_modifiers.items():
            if mod.startswith("+"):
                modifier_display += f" + {int(mod[1:]) * count} {GEAR_EMOJI}"
            elif mod.startswith("-"):
                modifier_display += f" - {int(mod[1:]) * count} {GEAR_EMOJI}"

        if dice_count > MAX_DICE_COUNT or dice_sides > MAX_DICE_SIDES or dice_sides <= 0:
            results.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫—É–±–∏–∫–æ–≤ –∏–ª–∏ –≥—Ä–∞–Ω–µ–π, {display_name}.")
            continue

        roll_results = roll_dice(dice_sides, dice_count)
        total = sum(roll_results) + total_modifiers

        # –ï—Å–ª–∏ —Å—É–º–º–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ <= 0, –≤—ã–≤–æ–¥–∏–º "–í—ã–ø–∞–ª–∞ 1"
        if total <= 0:
            results.append(f"{display_name}, –≤—ã–ø–∞–ª–∞ 1. ({modifier_display})")
            continue

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 20-–≥—Ä–∞–Ω–Ω–æ–≥–æ –∫—É–±–∏–∫–∞
        if dice_sides == 20:
            if dice_count == 1:
                roll = roll_results[0]
                if roll == 1:
                    roll_detail = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª {CRIT_FAIL_EMOJI}"
                elif roll == 20:
                    roll_detail = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö {CRIT_SUCCESS_EMOJI}"
                else:
                    roll_detail = str(roll)
            else:
                detailed_rolls = []
                for roll in roll_results:
                    if roll == 1:
                        detailed_rolls.append(f"{roll}{CRIT_FAIL_EMOJI}")
                    elif roll == 20:
                        detailed_rolls.append(f"{roll}{CRIT_SUCCESS_EMOJI}")
                    else:
                        detailed_rolls.append(str(roll))
                roll_detail = " + ".join(detailed_rolls)
        else:
            roll_detail = " + ".join(map(str, roll_results))

        results.append(f"{display_name}, –ò—Ç–æ–≥: {total}. ({roll_detail}{modifier_display})")

    return "\n".join(results)
