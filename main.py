from tokenize import group
from typing import Dict, Any
import vk_api
from vk_api.bot_longpoll import VkBotEventType, VkBotLongPoll
from config import token, group_id
from controllers.diceController import calculate_roll
from controllers.messageController import (
    burn_command,
    devour_command,  # NEW
    choose_option,
    get_random_joke,
    hug_command,
    kiss_command,
    bonk_command,
    slap_command,
    send_message,
    get_user_name,
    help_message,
)
from controllers.duelController import DuelController
from controllers.bingoController import BingoController
from controllers.characterController import CharacterController
from controllers.marriageController import MarriageController
from controllers.profileController import ProfileController
from controllers.rouletteController import RouletteController

# --- VK init ---
vk_session = vk_api.VkApi(token=token)
longpoll = VkBotLongPoll(vk_session, group_id=group_id, wait=60)
vk = vk_session.get_api()

marriage_controller = MarriageController()
profile_controller = ProfileController()
roulette_controller = RouletteController()
bingoController = BingoController()
characterController = CharacterController()

# ---------------- Main loop -----------------
for event in longpoll.listen():
    if event.type != VkBotEventType.MESSAGE_NEW:
        continue

    # -------- –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è --------
    message = event.obj.message
    original_text = message["text"].strip()
    text = original_text.lower()

    peer_id = message["peer_id"]
    user_id = message["from_id"]

    user_name = get_user_name(user_id)

    # --- –í—ã–±–æ—Ä "–∏–ª–∏" ---
    if " –∏–ª–∏ " in text:
        response = choose_option(text)
        if response:
            send_message(peer_id, response)
            continue

    # ===== –ö—É–±—ã =====
    if "–º–∞—Ä—Ç–∞" in text:
        roll_command = text.split("–º–∞—Ä—Ç–∞", 1)[1].strip()
        send_message(peer_id, calculate_roll(user_name, roll_command))
        continue
    elif "/" in text:
        roll_command = text.split("/", 1)[1].strip()
        send_message(peer_id, calculate_roll(user_name, roll_command))
        continue

    # ===== –û–±—â–∏–µ —Ñ—Ä–∞–∑—ã =====
    if text == "–ø—Ä–∏–≤–µ—Ç":
        send_message(peer_id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        continue
    if text == "–ø–æ–∫–∞":
        send_message(peer_id, f"–£–¥–∞—á–∏ –≤–∞–º, {user_name}!")
        continue
    if text == "–ø–æ–º–æ—â—å":
        send_message(peer_id, help_message)
        continue
    if text == "–∞–Ω–µ–∫–¥–æ—Ç":
        send_message(peer_id, get_random_joke())
        continue

    # ===== –î—É—ç–ª–∏ =====
    if text == "–¥—É—ç–ª—å":
        if message.get('reply_message'):
            response = DuelController.handle_duel_command(user_id, message['reply_message'])
        else:
            response = DuelController.handle_duel_command(user_id)
        send_message(peer_id, response)
        continue

    if text == "–ø—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å":
        send_message(peer_id, DuelController.handle_accept_duel(user_id))
        continue

    if text == "–≤—ã—Å—Ç—Ä–µ–ª":
        send_message(peer_id, DuelController.handle_shoot_command(peer_id, user_id))
        continue

    if text == "–¥—É—ç–ª—å —Å—Ç–∞—Ç–∞":
        stats = DuelController.get_stats(peer_id)
        if not stats:
            send_message(peer_id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞.')
        else:
            response = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ –≤ –¥—É—ç–ª—è—Ö:\n'
            for uid, user_stats in stats.items():
                uname = get_user_name(uid)
                wins = user_stats["wins"]
                streak = user_stats["streak"]
                rank = DuelController.get_rank(wins)
                streak_info = f" | –°–µ—Ä–∏—è: {streak}üî•" if streak >= 1 else ""
                response += f'{uname}: {wins} ({rank}){streak_info}\n'
            send_message(peer_id, response)
        continue

    # ===== –ë—Ä–∞–∫ =====
    if text == "–±—Ä–∞–∫":
        if message.get('reply_message'):
            response = marriage_controller.propose_marriage(user_id, peer_id, message['reply_message'])
        else:
            response = marriage_controller.propose_marriage(user_id, peer_id)
        send_message(peer_id, response)
        continue

    if text == "–ø—Ä–∏–Ω—è—Ç—å –±—Ä–∞–∫":
        send_message(peer_id, marriage_controller.accept_marriage(user_id))
        continue

    if text == "—Ä–∞–∑–≤–æ–¥":
        send_message(peer_id, marriage_controller.divorce(user_id, peer_id))
        continue

    if text == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–≤–æ–¥":
        send_message(peer_id, marriage_controller.confirm_divorce(user_id))
        continue

    if text == "–±—Ä–∞–∫–∏":
        marriages = marriage_controller.get_marriages(peer_id)
        if not marriages:
            response = '–í –Ω–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏ –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤ –±—Ä–∞–∫–µ!'
        else:
            response = '–°–ø–∏—Å–æ–∫ –±—Ä–∞–∫–æ–≤:\n'
            for pair, data in marriages.items():
                id1, id2 = eval(pair)
                response += f"{get_user_name(id1)} + {get_user_name(id2)} (—Å {data['date']})\n"
        send_message(peer_id, response)
        continue

    # ===== –ü—Ä–æ—Ñ–∏–ª—å =====
    if text.startswith("–º–Ω–µ –Ω–∏–∫"):
        nickname = original_text[len("–º–Ω–µ –Ω–∏–∫"):].strip()
        if nickname:
            profile_controller.set_nickname(user_id, nickname)
            send_message(peer_id, f"–í–∞—à –Ω–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{nickname}'.")
        else:
            send_message(peer_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '–º–Ω–µ –Ω–∏–∫'.")
        continue

    # ===== –≠–º–æ—Ü–∏–∏ =====
    if text.startswith("–æ–±–Ω—è—Ç—å"):
        reply_msg = event.message.get('reply_message')
        send_message(peer_id, hug_command(user_id, reply_msg))
        continue

    if text.startswith("–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å"):
        reply_msg = event.message.get('reply_message')
        send_message(peer_id, kiss_command(user_id, reply_msg))
        continue

    if text.startswith("—Å–∂–µ—á—å"):
        reply_msg = event.message.get('reply_message')
        resp, img_path = burn_command(user_id, reply_msg)
        send_message(peer_id, resp, image_path=img_path)  # FIX: keyword arg
        continue

    if text.startswith("—Å–æ–∂—Ä–∞—Ç—å"):
        reply_msg = event.message.get('reply_message')
        resp, doc_path = devour_command(user_id, reply_msg)
        send_message(peer_id, resp, doc_path=doc_path)
        continue

    if text.startswith("—à–ª—ë–ø–Ω—É—Ç—å") or text.startswith("—à–ª–µ–ø–Ω—É—Ç—å"):
        reply_msg = event.message.get('reply_message')
        send_message(peer_id, slap_command(user_id, reply_msg))
        continue

    if text.startswith("–±–æ–Ω—å–∫"):
        reply_msg = event.message.get('reply_message')
        send_message(peer_id, bonk_command(user_id, reply_msg))
        continue

    # ===== –†—É–ª–µ—Ç–∫–∞ =====
    if text == "—Ä—É–ª–µ—Ç–∫–∞":
        send_message(peer_id, roulette_controller.start_game(peer_id, user_id))
        continue

    if text == "—Ä—É–ª–µ—Ç–∫–∞ –≤—Å—Ç—É–ø–∏—Ç—å":
        send_message(peer_id, roulette_controller.join_game(peer_id, user_id))
        continue

    if text == "—Ä—É–ª–µ—Ç–∫–∞ –Ω–∞—á–∞—Ç—å":
        send_message(peer_id, roulette_controller.start_roulette(peer_id))
        continue

    if text == "—â–µ–ª—á–æ–∫":
        send_message(peer_id, roulette_controller.shoot(peer_id, user_id))
        continue

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä—ã –≤ –ª–æ—Ç–æ
    if text == "–ª–æ—Ç–æ":
            response = bingoController.start_game(peer_id, user_id)
            send_message(peer_id, response)
            continue

    if text == "–ª–æ—Ç–æ –≤—Å—Ç—É–ø–∏—Ç—å":
            response = bingoController.join_game(peer_id, user_id)
            send_message(peer_id, response)
            continue

    if text == "–ª–æ—Ç–æ –Ω–∞—á–∞—Ç—å":
            response = bingoController.start_bingo(peer_id, user_id)
            send_message(peer_id, response)
            continue

    if text == "–ª–æ—Ç–æ —á–∏—Å–ª–æ":
            response = bingoController.draw_number(peer_id, user_id)
            send_message(peer_id, response)
            continue

    if text == "–ª–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞":
            response = bingoController.check_card(peer_id, user_id)
            send_message(peer_id, response)

    if text == "–ª–æ—Ç–æ —á–∏—Å–ª–∞":
            response = bingoController.get_drawn_numbers(peer_id)
            send_message(peer_id, response)

    if text == "–ª–æ—Ç–æ —Å—Ç–æ–ø":
            response = bingoController.end_game(peer_id, user_id)
            send_message(peer_id, response)
            
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ D&D 5e
    if text == "–ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é" or text == "–Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂":
            response = characterController.start_character_creation(user_id, peer_id)
            send_message(peer_id, response)

    if text == "–ª–∏—Ü–µ–Ω–∑–∏—è" or text == "–ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞":
            response = characterController.get_character_sheet(user_id, peer_id)
            send_message(peer_id, response)

    if text == "—Å–¥–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é":
            response = characterController.delete_character(user_id, peer_id)
            send_message(peer_id, response)

    else:
            #–£—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
            pass
