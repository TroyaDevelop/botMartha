import random
import re
from typing import List, Dict, Set, Optional

# ====== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ======
MAX_DICE_COUNT = 250      # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±—Ä–æ—Å–∞–µ–º—ã—Ö –∫—É–±–∏–∫–æ–≤
MAX_DICE_SIDES = 1000      # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≥—Ä–∞–Ω–µ–π —É –∫—É–±–∏–∫–∞
BIAS_EXPONENT  = 0.8      # < 1.0 ‚Äî —á–∞—â–µ –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, > 1.0 ‚Äî —á–∞—â–µ –Ω–∏–∑–∫–∏–µ

CRIT_FAIL_EMOJI    = "‚ò†Ô∏è"
CRIT_SUCCESS_EMOJI = "üí•"
GEAR_EMOJI         = "‚öôÔ∏è"

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã: –∫–ª—é—á = –≥—Ä–∞–Ω–µ–π, –∑–Ω–∞—á–µ–Ω–∏—è = –º–Ω–æ–∂–µ—Å—Ç–≤–∞ ¬´success¬ª/¬´fail¬ª
CRITICAL_RANGES: Dict[int, Dict[str, Set[int]]] = {
    20: {"success": {20}, "fail": {1}},
    16: {"success": {16}},
    12: {"success": {12}},
    10: {"success": {10}},
     8: {"success": {8}},
     6: {"success": {6},  "fail": {1}},
}

# ====== –°–ø—Ä–∞–≤–∫–∞ ======
dice_help_message = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Å–∏—Å—Ç–µ–º–æ–π –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤:\n\n"
    "üé≤ –ö–æ–º–∞–Ω–¥—ã –±—Ä–æ—Å–∫–æ–≤:\n"
    "- /–¥20 ‚Äî –±—Ä–æ—Å–∏—Ç—å –æ–¥–∏–Ω 20‚Äë–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫.\n"
    "- /3–¥6 ‚Äî –±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∏ 6‚Äë–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É.\n"
    "- /–¥20+5 ‚Äî –±—Ä–æ—Å–∏—Ç—å –æ–¥–∏–Ω 20‚Äë–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫ –∏ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä +5.\n"
    "- /–¥20^ ‚Äî –±—Ä–æ—Å–æ–∫ —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º (–ª—É—á—à–∏–π –∏–∑ –¥–≤—É—Ö d20).\n"
    "- /–¥20_ ‚Äî –±—Ä–æ—Å–æ–∫ —Å –ø–æ–º–µ—Ö–æ–π (—Ö—É–¥—à–∏–π –∏–∑ –¥–≤—É—Ö d20).\n\n"
    "–ö—Ä–∏—Ç—ã: üí• –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫—Ä–∏—Ç‚Äë—É—Å–ø–µ—Ö–æ–≤, ‚ò†Ô∏è ‚Äî –∫—Ä–∏—Ç‚Äë–ø—Ä–æ–≤–∞–ª.\n"
    "–ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å', –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —ç—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –µ—â—ë —Ä–∞–∑. –£–¥–∞—á–∏ –≤ –±—Ä–æ—Å–∫–∞—Ö! üé≤"
)

# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======

def biased_roll(
    sides: int,
    exponent: float = BIAS_EXPONENT,
    rng: Optional[random.Random] = None,
) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç *–æ–¥–Ω–æ* –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ c —É–ø—Ä–∞–≤–ª—è–µ–º—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º.

    –ü–∞—Ä–∞–º–µ—Ç—Ä *exponent* –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫—Ä–∏–≤–∏–∑–Ω—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
        ‚Ä¢ **1.0** ¬†‚Äî —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É–±).
        ‚Ä¢ **<¬†1.0** ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å *–≤—ã—Å–æ–∫–∏—Ö* —á–∏—Å–µ–ª (0.8 ‚âà +10¬†% –∫ —Å—Ç–∞—Ä—à–∏–º –≥—Ä–∞–Ω—è–º).
        ‚Ä¢ **>¬†1.0** ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å *–Ω–∏–∑–∫–∏—Ö* —á–∏—Å–µ–ª (1.2 ‚âà +10¬†% –∫ –º–ª–∞–¥—à–∏–º –≥—Ä–∞–Ω—è–º).

    –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π RNG (–Ω–∞–ø—Ä–∏–º–µ—Ä, :class:`random.SystemRandom`)¬†‚Äî
    —ç—Ç–æ –æ–±–ª–µ–≥—á–∞–µ—Ç —é–Ω–∏—Ç‚Äë—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
    """
    if sides < 2:
        raise ValueError("sides must be ‚â• 2")
    if exponent <= 0:
        raise ValueError("exponent must be > 0")

    rng = rng or random
    u = rng.random()              # 0 ‚â§ u < 1
    v = u ** exponent             # —Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    result = int(v * sides) + 1   # 1 ‚Ä¶ sides (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    return min(result, sides)     # –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è ¬´sides + 1¬ª


def roll_dice(
    sides: int,
    rolls: int = 1,
    exponent: float = BIAS_EXPONENT,
    rng: Optional[random.Random] = None,
) -> List[int]:
    """–ë—Ä–æ—Å–∞–µ—Ç *rolls* —Ä–∞–∑ –∫—É–±–∏–∫ –Ω–∞ *sides* –≥—Ä–∞–Ω–µ–π —Å —Ç–µ–º –∂–µ —Å–º–µ—â–µ–Ω–∏–µ–º."""
    return [biased_roll(sides, exponent, rng) for _ in range(rolls)]


def _crit_emoji(roll: int, sides: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —ç–º–æ–¥–∑–∏ –∫—Ä–∏—Ç‚Äë—É—Å–ø–µ—Ö–∞/–ø—Ä–æ–≤–∞–ª–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)."""
    cfg = CRITICAL_RANGES.get(sides, {})
    if roll in cfg.get("fail", set()) or (roll == 1 and sides not in cfg.get("success", set())):
        return f" {CRIT_FAIL_EMOJI}"
    if roll in cfg.get("success", set()):
        return f" {CRIT_SUCCESS_EMOJI}"
    return ""

# ====== –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ======

def calculate_roll(nickname: str, command: str) -> str:
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç *command* –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤."""
    normalized = command.replace("–∫", "–¥").replace("d", "–¥").strip()
    if not normalized:
        return f"–î–∞, {nickname}?"

    low = normalized.lower()
    if "/–ø–æ–º–æ—â—å" in low or "–ø–æ–º–æ—â—å" in low:
        return dice_help_message
    if "–ø–æ—Ü–µ–ª—É–π" in low:
        return "üòò"

    #  /2–¥6+3      /–¥20^     /4–¥8_-1
    dice_re = re.compile(
        r"(?P<count>\d*)–¥(?P<sides>\d+)(?P<adv>[\^_]?)"
        r"((?P<modifiers>([+-]\d+)+))?"
    )
    mod_re = re.compile(r"([+-]\d+)")

    out_lines: List[str] = []

    for m in dice_re.finditer(normalized):
        dice_count = int(m.group("count") or "1")
        dice_sides = int(m.group("sides"))
        adv_flag   = m.group("adv")

        # ---- –í–∞–ª–∏–¥–∞—Ü–∏—è ----
        if dice_count > MAX_DICE_COUNT or dice_sides > MAX_DICE_SIDES or dice_sides < 2:
            out_lines.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫—É–±–∏–∫–æ–≤ –∏–ª–∏ –≥—Ä–∞–Ω–µ–π, {nickname}.")
            continue
        if adv_flag and dice_count != 1:
            out_lines.append(f"Advantage/Disadvantage –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫—É–±–∏–∫–∞, {nickname}.")
            continue

        # ---- –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã ----
        mods_str  = m.group("modifiers") or ""
        mod_vals  = [int(x) for x in mod_re.findall(mods_str)]
        total_mod = sum(mod_vals)
        mod_disp  = f" {'+' if total_mod>=0 else '-'} {abs(total_mod)} {GEAR_EMOJI}" if mods_str else ""

        # ---- –ë—Ä–æ—Å–æ–∫ ----
        if adv_flag:
            pair    = roll_dice(dice_sides, 2)
            chosen  = max(pair) if adv_flag == "^" else min(pair)
            total   = chosen + total_mod
            detail  = f"{pair[0]} / {pair[1]} ‚Üí {chosen}{_crit_emoji(chosen, dice_sides)}{mod_disp}"
            out_lines.append(f"{nickname}, –∏—Ç–æ–≥: {total}. ({detail})")
            continue

        # –û–±—ã—á–Ω—ã–π –±—Ä–æ—Å–æ–∫ / –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É–±–æ–≤
        rolls  = roll_dice(dice_sides, dice_count)
        total  = sum(rolls) + total_mod
        detailed = " + ".join(f"{r}{_crit_emoji(r, dice_sides)}" for r in rolls)
        out_lines.append(f"{nickname}, –∏—Ç–æ–≥: {total}. ({detailed}{mod_disp})")

    if not out_lines:
        return f"{nickname}, –≤ —Ç–≤–æ—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—Ä–æ—Å–∫–∞."

    return "\n".join(out_lines)
