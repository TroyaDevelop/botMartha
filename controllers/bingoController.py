import random
import time
from controllers.messageController import get_user_name

class BingoController:
    def __init__(self):
        self.games = {}  # {peer_id: {host_id: id, players: {user_id: card}, drawn_numbers: [], current_game: bool}}
        self.pending_games = {}  # {peer_id: {host_id: id, players: [], timestamp: float}}

    def start_game(self, peer_id, host_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –¥–ª—è –∏–≥—Ä—ã –≤ –ª–æ—Ç–æ"""
        if peer_id in self.games:
            return "–ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ!"
        
        if peer_id in self.pending_games:
            return "–ù–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ —É–∂–µ –∏–¥–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ '–ª–æ—Ç–æ –≤—Å—Ç—É–ø–∏—Ç—å', —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è."
        
        self.pending_games[peer_id] = {
            "host_id": host_id,
            "players": [host_id],
            "timestamp": time.time()
        }
        
        host_name = get_user_name(host_id)
        return f"üé≤ {host_name} –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ—Ç–æ!\n\n" \
               f"üìù –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '–ª–æ—Ç–æ –≤—Å—Ç—É–ø–∏—Ç—å'\n" \
               f"üéØ –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–µ–¥—É—â–∏–π –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å '–ª–æ—Ç–æ –Ω–∞—á–∞—Ç—å'\n" \
               f"‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤"

    def join_game(self, peer_id, user_id):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏ –∏–≥—Ä—ã"""
        if peer_id not in self.pending_games:
            return "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤ –ª–æ—Ç–æ."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
        if time.time() - self.pending_games[peer_id]["timestamp"] > 300:  # 5 –º–∏–Ω—É—Ç
            del self.pending_games[peer_id]
            return "‚è∞ –í—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏—Å—Ç–µ–∫–ª–æ."

        if user_id in self.pending_games[peer_id]["players"]:
            return "‚úÖ –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ."

        self.pending_games[peer_id]["players"].append(user_id)
        players_list = [get_user_name(pid) for pid in self.pending_games[peer_id]["players"]]
        
        return f"üéâ {get_user_name(user_id)} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ –≤ –ª–æ—Ç–æ!\n\n" \
               f"üë• –¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–∫–∏ ({len(players_list)}): {', '.join(players_list)}\n" \
               f"üéØ –í–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å '–ª–æ—Ç–æ –Ω–∞—á–∞—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"

    def start_bingo(self, peer_id, user_id):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –ª–æ—Ç–æ (—Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å)"""
        if peer_id not in self.pending_games:
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã."
            
        if self.pending_games[peer_id]["host_id"] != user_id:
            host_name = get_user_name(self.pending_games[peer_id]["host_id"])
            return f"‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π ({host_name}) –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
            
        if len(self.pending_games[peer_id]["players"]) < 2:
            return "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ –ª–æ—Ç–æ."

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
        players = self.pending_games[peer_id]["players"]
        player_cards = {}
        
        for player_id in players:
            player_cards[player_id] = self._generate_bingo_card()
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        self.games[peer_id] = {
            "host_id": self.pending_games[peer_id]["host_id"],
            "players": player_cards,
            "drawn_numbers": [],
            "current_game": True,
            "numbers_left": list(range(1, 91))  # –ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 90
        }
        
        # –£–¥–∞–ª—è–µ–º –ª–æ–±–±–∏
        del self.pending_games[peer_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
        response = "üé≤ –ò–ì–†–ê –í –õ–û–¢–û –ù–ê–ß–ê–õ–ê–°–¨! üé≤\n\n"
        
        for player_id, card in player_cards.items():
            player_name = get_user_name(player_id)
            response += f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞ {player_name}:\n"
            response += self._format_card(card) + "\n\n"
        
        response += "üéØ –í–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å '–ª–æ—Ç–æ —á–∏—Å–ª–æ', —á—Ç–æ–±—ã –≤—ã—Ç—è–Ω—É—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä!\n"
        response += "‚úÖ –ò–≥—Ä–æ–∫–∏ –æ—Ç–º–µ—á–∞—é—Ç —á–∏—Å–ª–∞ –Ω–∞ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö"
        
        return response

    def draw_number(self, peer_id, user_id):
        """–í—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∏—Å–ª–∞ (—Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π)"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
            
        if not self.games[peer_id]["current_game"]:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            
        if self.games[peer_id]["host_id"] != user_id:
            host_name = get_user_name(self.games[peer_id]["host_id"])
            return f"‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π ({host_name}) –º–æ–∂–µ—Ç –≤—ã—Ç—è–≥–∏–≤–∞—Ç—å —á–∏—Å–ª–∞!"
        
        if not self.games[peer_id]["numbers_left"]:
            return "üéâ –í—Å–µ —á–∏—Å–ª–∞ —É–∂–µ –≤—ã—Ç—è–Ω—É—Ç—ã!"
        
        # –í—ã—Ç—è–≥–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
        drawn_number = random.choice(self.games[peer_id]["numbers_left"])
        self.games[peer_id]["numbers_left"].remove(drawn_number)
        self.games[peer_id]["drawn_numbers"].append(drawn_number)
        
        response = f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {drawn_number}\n\n"
        response += f"üìä –í—ã—Ç—è–Ω—É—Ç–æ —á–∏—Å–µ–ª: {len(self.games[peer_id]['drawn_numbers'])}/90\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–æ–≥–æ-—Ç–æ –±–∏–Ω–≥–æ
        winners = self._check_for_winners(peer_id)
        if winners:
            response += "\nüéâ –ë–ò–ù–ì–û! üéâ\n"
            for winner_id in winners:
                winner_name = get_user_name(winner_id)
                response += f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {winner_name}!\n"
            
            self.games[peer_id]["current_game"] = False
            response += "\nüéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        else:
            response += "\nüéØ –í–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å '–ª–æ—Ç–æ —á–∏—Å–ª–æ' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∏—Å–ª–∞"
        
        return response

    def check_card(self, peer_id, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
            
        if user_id not in self.games[peer_id]["players"]:
            return "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ."
        
        card = self.games[peer_id]["players"][user_id]
        drawn_numbers = self.games[peer_id]["drawn_numbers"]
        
        response = f"üìã –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:\n"
        response += self._format_card_with_marks(card, drawn_numbers)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –æ—Ç–º–µ—á–µ–Ω–æ
        marked_count = sum(1 for row in card for num in row if num in drawn_numbers)
        total_count = sum(1 for row in card for num in row if num != 0)
        
        response += f"\n‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: {marked_count}/{total_count}"
        
        return response

    def get_drawn_numbers(self, peer_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—ã—Ç—è–Ω—É—Ç—ã–µ —á–∏—Å–ª–∞"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
        
        drawn = self.games[peer_id]["drawn_numbers"]
        if not drawn:
            return "üé≤ –ß–∏—Å–ª–∞ –µ—â–µ –Ω–µ –≤—ã—Ç—è–≥–∏–≤–∞–ª–∏—Å—å."
        
        response = f"üéØ –í—ã—Ç—è–Ω—É—Ç—ã–µ —á–∏—Å–ª–∞ ({len(drawn)}):\n"
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        response += " ".join(str(num) for num in drawn)
        
        return response

    def end_game(self, peer_id, user_id):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π)"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
            
        if self.games[peer_id]["host_id"] != user_id:
            host_name = get_user_name(self.games[peer_id]["host_id"])
            return f"‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π ({host_name}) –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É!"
        
        del self.games[peer_id]
        return "üéÆ –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–µ–¥—É—â–∏–º."

    def _generate_bingo_card(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ—Ç–æ 3x9 —Å —á–∏—Å–ª–∞–º–∏ –æ—Ç 1 –¥–æ 90"""
        card = [[0 for _ in range(9)] for _ in range(3)]
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª
        for col in range(9):
            if col == 0:
                numbers = list(range(1, 10))
            elif col == 8:
                numbers = list(range(81, 91))
            else:
                numbers = list(range(col * 10, (col + 1) * 10))
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
            selected = random.sample(numbers, 3)
            selected.sort()
            
            for row in range(3):
                card[row][col] = selected[row]
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∏—Å–ª–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞ (0)
        for row in range(3):
            # –í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 —á–∏—Å–µ–ª –∏ 4 –ø—É—Å—Ç—ã—Ö –º–µ—Å—Ç–∞
            positions_to_clear = random.sample(range(9), 4)
            for pos in positions_to_clear:
                card[row][pos] = 0
        
        return card

    def _format_card(self, card):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏: —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ø–æ 5 –≤ —Ä—è–¥—É, –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        result = ""
        for row in card:
            nums = [str(num).center(3) if num != 0 else "   " for num in row]
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 —á–∏—Å–µ–ª, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ
            filtered = [n for n in nums if n.strip()]
            while len(filtered) < 5:
                filtered.append("   ")
            result += " ".join(filtered) + "\n"
        return result

    def _format_card_with_marks(self, card, drawn_numbers):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏: —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ø–æ 5 –≤ —Ä—è–¥—É, –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        result = ""
        for row in card:
            nums = []
            for num in row:
                if num == 0:
                    continue
                elif num in drawn_numbers:
                    mark = f"‚úì{num}" if num >= 10 else f"‚úì{num}"
                    nums.append(mark.center(3))
                else:
                    nums.append(str(num).center(3))
            while len(nums) < 5:
                nums.append("   ")
            result += " ".join(nums) + "\n"
        return result

    def _check_for_winners(self, peer_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞)"""
        winners = []
        drawn_numbers = set(self.games[peer_id]["drawn_numbers"])
        
        for player_id, card in self.games[peer_id]["players"].items():
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫—Ä–æ–º–µ –ø—É—Å—Ç—ã—Ö –º–µ—Å—Ç)
            player_numbers = set()
            for row in card:
                for num in row:
                    if num != 0:
                        player_numbers.add(num)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —á–∏—Å–ª–∞ –∏–≥—Ä–æ–∫–∞ –≤—ã—Ç—è–Ω—É—Ç—ã
            if player_numbers.issubset(drawn_numbers):
                winners.append(player_id)
        
        return winners
